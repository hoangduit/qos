                            qOS, The Real-Time Kernel
                               DISTRIBUTION
                                
                               Version 0.01

                               READ ME FILE

    qOS，是一个非常小的非抢先式嵌入式操作系统。

    开发qOS的原因，在于屡次遇到下面的问题：
1   不同系统有不同的信号量、临界区处理方法。
    这些概念复杂，容易出错，为什么这是必须的呢？
    能否将这些需求降低一些呢？
2   调试消息队列满了,丢失消息后，导致系统出现莫名奇怪的问题。
    为什么操作系统不能在消息队列满时，就提示我出错了呢？
    而一定要我写代码呢？

    其设计理念为：
1   简单。
    该系统的设计，尽量体现简单的原则，举几例为证：
    用静态数组作为task control table。
    只需要一个定时器中断(前台)，作为任务切换时间源，其他代码，均运行于后台。
    因为任务都运行于后台，所以除了和中断之间交互数据，任务之间交互数据，无需考虑函数的可重入、互斥、同步、死锁等问题。
    简单设计的结果，使系统容易理解，更容易调试和移植，系统更轻巧、快速。
2   可裁剪。
3   透明的任务时间约束。
    可以给每个任务提供明确的时间约束条件，例如：设置某个任务必须10ms调用一次，如果超出10ms，报错。
    这样，当系统失效时，能够立即知道原因。
4   注重调试。哪里出错，哪里报错。
    分为调试状态和工作状态。
    调试状态，速度稍慢，但进行详尽的错误测试。
    工作状态时，做较少的错误检测，运行速度加快。
    当然，你也可以发布调试状态，这样，当系统运行时，消息队列满了，可以通过代码出错记录看到，
    而不是消息丢失后，通过系统表现异常,来猜测出错原因。
    


LICESING TERMS--------------------------------------



TABLE OF CONTENTS-----------------------------------
1. Reporting problems
2. Software Upgrades
3. Release Notes


Reporting problems-----------------------------------
    If you find a problem (i.e. bug) in qOS, do not hesitate to report
the problem to either:
1) Through the INTERNET:
    My INTERNET address is: 
2) By writing to me at:
    My email is: husthl@gmail.com



Software upgrades-----------------------------------



Release notes-----------------------------------




------------------------------------------------------------------------------
readme.txt,v1.0 2009/08/29 18:46:00


